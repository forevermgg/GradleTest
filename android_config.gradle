def getGitBranch() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (exception) {
        exception.printStackTrace()
        return "unkown"
    }
}

def getGitHash() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'log', '--pretty=format:%h', '-n 1'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (exception) {
        exception.printStackTrace()
        return "unkown"
    }
}

def gitGitVersionCode() {
    try {
        return 'git rev-list HEAD --first-parent --count'.execute().text.trim().toInteger()
    }
    catch (ignored) {
        return 1
    }
}

static def getCurrentWorkSpaceSystem() {
    String osName = org.gradle.internal.os.OperatingSystem.current().getName()
    String osVersion = org.gradle.internal.os.OperatingSystem.current().getVersion()
    System.err.println("*** $osName $osVersion was detected.")

    /*if (OperatingSystem.current().isLinux()) {
        // Consider Linux.
    } else if (OperatingSystem.current().isUnix()) {
        // Consider UNIX.
    } else if (OperatingSystem.current().isWindows()) {
        // Consider Windows.
    } else if (OperatingSystem.current().isMacOsX()) {
        // Consider OS X.
    } else {
        // Unknown OS.
    }*/
    return osName
}

println("osNameï¼š" + System.getProperty("os.name"))

ext {
    minSdkVersion = 30
    compileSdkVersion = 33
    targetSdkVersion = 33
    buildToolsVersion = "33.0.0"
    javaVersion = JavaVersion.VERSION_1_7
    ndkVersion = "25.1.8937393"
    cmakeVersion = "3.22.1"
    abiFilters = "armeabi-v7a,arm64-v8a,x86,x86_64"
    useASAN = false
    dependencyOnLocalLibrary = true
    gitBranch = getGitBranch()
    gitCommitId = getGitHash()
    gitGitVersionCode = gitGitVersionCode()
    osName = getCurrentWorkSpaceSystem()
    parseVersion = "unknow"
}

/*
qci {
    iSCI = false
}*/